# -*- coding: utf-8 -*-
"""MNIST.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1x65bIx3HsEBf7FAyOr_z_rxUvulKwrbk
"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

import torch
f = open('/content/drive/My Drive/Colab Notebooks/mnist_train.csv', 'r')
ins_l, expected_l, testins_l, testexp_l = [], [], [], []
for raw in f:
  nums = [float(val) if n else int(val) for n, val in enumerate(raw.split(','))]
  ins_l.append(nums[1:])
  curr_exp = [1.0 if i == nums[0] else 0.0 for i in range(10)]
  expected_l.append(curr_exp)

ins, expected = torch.tensor(ins_l), torch.tensor(expected_l)
nodeCts = [784, 300, 100, 10]
print('Layercts:', nodeCts)
netSpec = [torch.nn.Sigmoid() if i%2 else torch.nn.Linear(nodeCts[i//2], nodeCts[1+i//2]) for i in range(2*len(nodeCts)-2)]
mynn = torch.nn.Sequential(*netSpec)
criterion = torch.nn.MSELoss()
optimizer = torch.optim.SGD(mynn.parameters(), lr=0.5)
for epoch in range(1000+1):
  y_pred = mynn(ins)
  loss = criterion(y_pred, expected)
  optimizer.zero_grad()
  loss.backward()
  optimizer.step()
print('Epoches:', epoch)

t = open('/content/drive/My Drive/Colab Notebooks/mnist_test.csv', 'r')
for raw in t:
  nums = [float(val) if n else int(val) for n, val in enumerate(raw.split(','))]
  testins_l.append(nums[1:])
  curr_exp = [1.0 if i == nums[0] else 0.0 for i in range(10)]
  testexp_l.append(curr_exp)
testins, testexp = torch.tensor(testins_l), torch.tensor(testexp_l)
result, errs = mynn(testins), 0
for n, tsr in enumerate(result):
  ans = tsr.tolist()
  high = ans.index(max(ans))
  if not testexp_l[n][high]: errs += 1
print(errs/len(result)*100, '% Incorrect in Test Set', sep='')